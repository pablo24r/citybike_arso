
package es.um.arso;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "IServicioAlquileres", targetNamespace = "http://um.es/arso")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface IServicioAlquileres {


    /**
     * 
     * @param arg1
     * @param arg0
     * @throws RepositorioException_Exception
     * @throws EntidadNoEncontrada_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "reservar", targetNamespace = "http://um.es/arso", className = "es.um.arso.Reservar")
    @ResponseWrapper(localName = "reservarResponse", targetNamespace = "http://um.es/arso", className = "es.um.arso.ReservarResponse")
    @Action(input = "http://um.es/arso/IServicioAlquileres/reservarRequest", output = "http://um.es/arso/IServicioAlquileres/reservarResponse", fault = {
        @FaultAction(className = RepositorioException_Exception.class, value = "http://um.es/arso/IServicioAlquileres/reservar/Fault/RepositorioException"),
        @FaultAction(className = EntidadNoEncontrada_Exception.class, value = "http://um.es/arso/IServicioAlquileres/reservar/Fault/EntidadNoEncontrada")
    })
    public void reservar(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws EntidadNoEncontrada_Exception, RepositorioException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws RepositorioException_Exception
     * @throws EntidadNoEncontrada_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "confirmarReserva", targetNamespace = "http://um.es/arso", className = "es.um.arso.ConfirmarReserva")
    @ResponseWrapper(localName = "confirmarReservaResponse", targetNamespace = "http://um.es/arso", className = "es.um.arso.ConfirmarReservaResponse")
    @Action(input = "http://um.es/arso/IServicioAlquileres/confirmarReservaRequest", output = "http://um.es/arso/IServicioAlquileres/confirmarReservaResponse", fault = {
        @FaultAction(className = RepositorioException_Exception.class, value = "http://um.es/arso/IServicioAlquileres/confirmarReserva/Fault/RepositorioException"),
        @FaultAction(className = EntidadNoEncontrada_Exception.class, value = "http://um.es/arso/IServicioAlquileres/confirmarReserva/Fault/EntidadNoEncontrada")
    })
    public void confirmarReserva(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws EntidadNoEncontrada_Exception, RepositorioException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws RepositorioException_Exception
     * @throws EntidadNoEncontrada_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "alquilar", targetNamespace = "http://um.es/arso", className = "es.um.arso.Alquilar")
    @ResponseWrapper(localName = "alquilarResponse", targetNamespace = "http://um.es/arso", className = "es.um.arso.AlquilarResponse")
    @Action(input = "http://um.es/arso/IServicioAlquileres/alquilarRequest", output = "http://um.es/arso/IServicioAlquileres/alquilarResponse", fault = {
        @FaultAction(className = RepositorioException_Exception.class, value = "http://um.es/arso/IServicioAlquileres/alquilar/Fault/RepositorioException"),
        @FaultAction(className = EntidadNoEncontrada_Exception.class, value = "http://um.es/arso/IServicioAlquileres/alquilar/Fault/EntidadNoEncontrada")
    })
    public void alquilar(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws EntidadNoEncontrada_Exception, RepositorioException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws RepositorioException_Exception
     * @throws EntidadNoEncontrada_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "historialUsuario", targetNamespace = "http://um.es/arso", className = "es.um.arso.HistorialUsuario")
    @ResponseWrapper(localName = "historialUsuarioResponse", targetNamespace = "http://um.es/arso", className = "es.um.arso.HistorialUsuarioResponse")
    @Action(input = "http://um.es/arso/IServicioAlquileres/historialUsuarioRequest", output = "http://um.es/arso/IServicioAlquileres/historialUsuarioResponse", fault = {
        @FaultAction(className = RepositorioException_Exception.class, value = "http://um.es/arso/IServicioAlquileres/historialUsuario/Fault/RepositorioException"),
        @FaultAction(className = EntidadNoEncontrada_Exception.class, value = "http://um.es/arso/IServicioAlquileres/historialUsuario/Fault/EntidadNoEncontrada")
    })
    public String historialUsuario(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws EntidadNoEncontrada_Exception, RepositorioException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws RepositorioException_Exception
     * @throws EntidadNoEncontrada_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "dejarBicicleta", targetNamespace = "http://um.es/arso", className = "es.um.arso.DejarBicicleta")
    @ResponseWrapper(localName = "dejarBicicletaResponse", targetNamespace = "http://um.es/arso", className = "es.um.arso.DejarBicicletaResponse")
    @Action(input = "http://um.es/arso/IServicioAlquileres/dejarBicicletaRequest", output = "http://um.es/arso/IServicioAlquileres/dejarBicicletaResponse", fault = {
        @FaultAction(className = RepositorioException_Exception.class, value = "http://um.es/arso/IServicioAlquileres/dejarBicicleta/Fault/RepositorioException"),
        @FaultAction(className = EntidadNoEncontrada_Exception.class, value = "http://um.es/arso/IServicioAlquileres/dejarBicicleta/Fault/EntidadNoEncontrada")
    })
    public void dejarBicicleta(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws EntidadNoEncontrada_Exception, RepositorioException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "obtenerId", targetNamespace = "http://um.es/arso", className = "es.um.arso.ObtenerId")
    @ResponseWrapper(localName = "obtenerIdResponse", targetNamespace = "http://um.es/arso", className = "es.um.arso.ObtenerIdResponse")
    @Action(input = "http://um.es/arso/IServicioAlquileres/obtenerIdRequest", output = "http://um.es/arso/IServicioAlquileres/obtenerIdResponse")
    public String obtenerId();

    /**
     * 
     * @param arg0
     * @throws RepositorioException_Exception
     * @throws EntidadNoEncontrada_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "liberarBloqueo", targetNamespace = "http://um.es/arso", className = "es.um.arso.LiberarBloqueo")
    @ResponseWrapper(localName = "liberarBloqueoResponse", targetNamespace = "http://um.es/arso", className = "es.um.arso.LiberarBloqueoResponse")
    @Action(input = "http://um.es/arso/IServicioAlquileres/liberarBloqueoRequest", output = "http://um.es/arso/IServicioAlquileres/liberarBloqueoResponse", fault = {
        @FaultAction(className = RepositorioException_Exception.class, value = "http://um.es/arso/IServicioAlquileres/liberarBloqueo/Fault/RepositorioException"),
        @FaultAction(className = EntidadNoEncontrada_Exception.class, value = "http://um.es/arso/IServicioAlquileres/liberarBloqueo/Fault/EntidadNoEncontrada")
    })
    public void liberarBloqueo(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws EntidadNoEncontrada_Exception, RepositorioException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns es.um.arso.Alquiler
     * @throws RepositorioException_Exception
     * @throws EntidadNoEncontrada_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "recuperarAlquiler", targetNamespace = "http://um.es/arso", className = "es.um.arso.RecuperarAlquiler")
    @ResponseWrapper(localName = "recuperarAlquilerResponse", targetNamespace = "http://um.es/arso", className = "es.um.arso.RecuperarAlquilerResponse")
    @Action(input = "http://um.es/arso/IServicioAlquileres/recuperarAlquilerRequest", output = "http://um.es/arso/IServicioAlquileres/recuperarAlquilerResponse", fault = {
        @FaultAction(className = RepositorioException_Exception.class, value = "http://um.es/arso/IServicioAlquileres/recuperarAlquiler/Fault/RepositorioException"),
        @FaultAction(className = EntidadNoEncontrada_Exception.class, value = "http://um.es/arso/IServicioAlquileres/recuperarAlquiler/Fault/EntidadNoEncontrada")
    })
    public Alquiler recuperarAlquiler(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws EntidadNoEncontrada_Exception, RepositorioException_Exception
    ;

}
